# Generated by Django 4.2.7 on 2025-07-02 17:52

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('superadmin', 'مدير عام'), ('admin', 'مدير'), ('user', 'مستخدم')], default='user', max_length=20, verbose_name='نوع المستخدم')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='الهاتف')),
                ('department', models.CharField(blank=True, max_length=100, verbose_name='القسم')),
                ('can_access_sales', models.BooleanField(default=False, verbose_name='الوصول للمبيعات')),
                ('can_access_purchases', models.BooleanField(default=False, verbose_name='الوصول للمشتريات')),
                ('can_access_inventory', models.BooleanField(default=False, verbose_name='الوصول للمخزون')),
                ('can_access_banks', models.BooleanField(default=False, verbose_name='الوصول للبنوك')),
                ('can_access_reports', models.BooleanField(default=False, verbose_name='الوصول للتقارير')),
                ('can_delete_invoices', models.BooleanField(default=False, verbose_name='حذف الفواتير')),
                ('can_edit_dates', models.BooleanField(default=False, verbose_name='تعديل التواريخ')),
                ('can_edit_invoice_numbers', models.BooleanField(default=False, verbose_name='تعديل أرقام الفواتير')),
                ('cash_only', models.BooleanField(default=False, verbose_name='كاش فقط')),
                ('credit_only', models.BooleanField(default=False, verbose_name='ذمم فقط')),
                ('can_see_low_stock_alerts', models.BooleanField(default=False, verbose_name='تنبيهات انخفاض المخزون')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'مستخدم',
                'verbose_name_plural': 'المستخدمون',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='اسم المجموعة')),
                ('description', models.TextField(blank=True, verbose_name='الوصف')),
                ('permissions', models.JSONField(default=dict, verbose_name='الصلاحيات')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
            ],
            options={
                'verbose_name': 'مجموعة المستخدمين',
                'verbose_name_plural': 'مجموعات المستخدمين',
            },
        ),
        migrations.CreateModel(
            name='UserGroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.usergroup', verbose_name='المجموعة')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='المستخدم')),
            ],
            options={
                'verbose_name': 'عضوية المجموعة',
                'verbose_name_plural': 'عضويات المجموعات',
                'unique_together': {('user', 'group')},
            },
        ),
    ]
