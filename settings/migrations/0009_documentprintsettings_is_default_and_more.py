# Generated by Django 4.2.7 on 2025-08-25 09:58

from django.db import migrations, connection


def add_columns_if_not_exists(apps, schema_editor):
    """Add columns to documentprintsettings table if they don't exist."""
    db_alias = schema_editor.connection.alias
    table_name = 'settings_documentprintsettings'
    
    # Check if columns exist and add them if not
    with connection.cursor() as cursor:
        # Get existing columns
        cursor.execute(f"PRAGMA table_info({table_name})")
        existing_columns = [row[1] for row in cursor.fetchall()]
        
        # Add is_default if not exists
        if 'is_default' not in existing_columns:
            cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN is_default boolean DEFAULT FALSE NOT NULL")
            cursor.execute(f"UPDATE {table_name} SET is_default = FALSE WHERE is_default IS NULL")
        
        # Add margins if not exists
        if 'margins' not in existing_columns:
            cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN margins integer DEFAULT 20 NOT NULL")
            cursor.execute(f"UPDATE {table_name} SET margins = 20 WHERE margins IS NULL")
        
        # Add orientation if not exists
        if 'orientation' not in existing_columns:
            cursor.execute(f"ALTER TABLE {table_name} ADD COLUMN orientation varchar(10) DEFAULT 'portrait' NOT NULL")
            cursor.execute(f"UPDATE {table_name} SET orientation = 'portrait' WHERE orientation IS NULL")


def remove_columns_if_exists(apps, schema_editor):
    """Remove columns from documentprintsettings table if they exist."""
    db_alias = schema_editor.connection.alias
    table_name = 'settings_documentprintsettings'
    
    with connection.cursor() as cursor:
        # Get existing columns
        cursor.execute(f"PRAGMA table_info({table_name})")
        existing_columns = [row[1] for row in cursor.fetchall()]
        
        # Remove columns if they exist
        if 'orientation' in existing_columns:
            cursor.execute(f"ALTER TABLE {table_name} DROP COLUMN orientation")
        if 'margins' in existing_columns:
            cursor.execute(f"ALTER TABLE {table_name} DROP COLUMN margins")
        if 'is_default' in existing_columns:
            cursor.execute(f"ALTER TABLE {table_name} DROP COLUMN is_default")


class Migration(migrations.Migration):

    dependencies = [
        ('settings', '0008_empty_migration'),
    ]

    operations = [
        migrations.RunPython(
            add_columns_if_not_exists,
            remove_columns_if_exists,
        ),
    ]
